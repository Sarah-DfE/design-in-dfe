---
title: Code snippets
weight: 260
---

<%= partial "ga" %>

<a href="/prototyping/" class="govuk-back-link">Back to prototyping</a>

# Code snippets

These code snippets will work in the GOV.UK Prototype Kit, if used as directed.

## Redirecting to another page

If you have a page with a form, you can redirect to another page using a router post method.

Make sure the following code is before the <code class="language-js">module.exports = router</code> line in your route.js file.

<pre>
<code class="language-js">router.post('/from-path', (req, res) => {
  res.redirect(307, '/to-path');
});</code>
</pre>

## Passing and getting a parameter from a URL

You might want to do some simple logic based on a parameter in a url for example: <code class="language-js">/path/page/12345</code> where 12345 is the parameter value being passed to the next page. 

Make sure the following code is before the <code class="language-js">module.exports = router</code> line in your route.js file.

<pre>
<code class="language-js">router.get('/page/:id', (req, res) => {
    var paramValue = req.params.id //id is the same name as your route param name

    // Do something with the paramValue

    // You can also pass it to the view to display
    // return res.render('/page', {paramValue});

    // This is open to abuse so be aware of how you use it as anything passed to the param is a security risk
    // Ideally, you'd validate the value against known criteria but for prototyping it can be a quick and dirty approach to do some logic work

    return res.render('/page');
});</code>
</pre>



## Loading a JSON file to use in a view

If you have a JSON dataset, you can load it from a file and pass it into your view. 

This is useful for mocking up tables or lists which can then be easily amended in the file without changing the view.

Example json-file.json 

Put data files in the <code class="language-js">app/data</code> folder

<pre>
<code class="language-json">[
    {
        "dataField": "value 1"
    },
    {
        "dataField": "value 2"
    },
    {
        "dataField": "value 3"
    }
]</code>
</pre>


In your routes.js file:

<pre>
<code class="language-js">router.get('/path-to-view', function (req, res) {
    var jsonData = require('./data/json-file.json');
    return res.render('path-to-view', { jsonData });
});</code>
</pre>


In your view file

<pre>
<code class="language-handlebars">&lt;ul&gt;
{% for item in jsonData %}
    &lt;li&gt;{{item.dataField}}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;</code>
</pre>
